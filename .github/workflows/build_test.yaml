name: Test E2E & RLS
on:
  pull_request:

jobs:
  test:
    name: E2E Tests
    timeout-minutes: 20
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # npmのキャッシュを設定
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Dockerキャッシュを設定
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Dockerキャッシュを復元
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Dockerイメージのキャッシュをロードする
      - name: Load cached Docker images
        if: steps.cache-supabase.outputs.cache-hit == 'true'
        run: |
          for img in /tmp/supabase-docker-cache/*.tar; do
            docker load < $img
          done
          docker images

      # Supabase CLIのセットアップと起動
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: |
          supabase start -x studio,postgres-meta,imgproxy
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      # Dockerイメージのキャッシュを保存する
      - name: Save Docker images to cache
        if: steps.cache-supabase.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/supabase-docker-cache
          docker images | grep supabase | awk '{print $1":"$2}' | xargs -I {} sh -c 'docker save {} > /tmp/supabase-docker-cache/$(echo {} | tr "/" "_" | tr ":" "_").tar'
          ls -la /tmp/supabase-docker-cache/

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      # Supabaseの起動を待機
      - name: Wait for Supabase
        run: |
          echo "Waiting for Supabase to be ready..."
          timeout 30 bash -c 'until curl -s http://localhost:54321/rest/v1/ > /dev/null; do sleep 1; done'
          echo "Supabase is ready!"

      # 環境変数を設定（ローカルSupabaseの接続情報）
      - name: Set Supabase environment variables
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:54322/postgres" >> $GITHUB_ENV

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run CI Tests
        run: npm run test:ci

      - name: Upload Jest test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-report
          path: jest-report/
          retention-days: 30

      - name: Upload Playwright test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
